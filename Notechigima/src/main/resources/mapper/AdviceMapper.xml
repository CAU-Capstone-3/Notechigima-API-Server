<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.capstone.notechigima.repository.AdviceRepository">

    <insert id="insertAll" parameterType="java.util.Map">
        INSERT INTO sentence_advice(sentence1_id, sentence2_id, advice_type)
        VALUES
        <foreach collection="list" item="item" separator=" , ">
            (#{item.sentence1Id}, #{item.sentence2Id}, #{item.adviceType})
        </foreach>
    </insert>
    
    <resultMap id="adviceList" type="com.capstone.notechigima.domain.sentence_advice.AdviceEntity">
        <result property="adviceId" column="adviceId"/>
        <result property="adviceType" column="adviceType"/>
        <result property="sentenceId1" column="sentenceId1"/>
        <result property="sentence1" column="sentence1"/>
        <result property="writerId1" column="writerId1"/>
        <result property="writerName1" column="writerName1"/>
        <result property="sentenceId2" column="sentenceId2"/>
        <result property="sentence2" column="sentence2"/>
        <result property="writerId2" column="writerId2"/>
        <result property="writerName2" column="writerName2"/>
        <collection column="adviceId" property="comments" javaType="java.util.ArrayList" ofType="com.capstone.notechigima.dto.comment.CommentListGetResponseDTO" select="getCommentListById"/>
    </resultMap>

    <select id="getCommentListById" parameterType="java.util.Map" resultType="com.capstone.notechigima.dto.comment.CommentListGetResponseDTO">
        SELECT c.comment_id commentId, c.user_id userId,
               u.nickname userName, c.content content,
               c.created_at createdAt, c.updated_at updatedAt
        FROM advice_comment c
        LEFT JOIN user u ON c.user_id = u.user_id
        WHERE c.advice_id = #{adviceId}
    </select>
    
    <select id="getAdviceList" resultMap="adviceList">
        SELECT a.advice_id   adviceId,
               a.advice_type adviceType,
               s1.sentence_id sentenceId1,
               s1.content sentence1,
               u1.user_id writerId1,
               u1.nickname writerName1,
               s2.sentence_id sentenceId2,
               s2.content sentence2,
               u2.user_id writerId2,
               u2.nickname writerName2
        FROM sentence_advice a
         LEFT JOIN sentence_unit s1 ON a.sentence1_id = s1.sentence_id
         LEFT JOIN note n1 ON s1.note_id = n1.note_id
         LEFT JOIN user u1 ON n1.owner_id = u1.user_id
         LEFT JOIN sentence_unit s2 ON a.sentence2_id = s2.sentence_id
         LEFT JOIN note n2 ON s2.note_id = n2.note_id
         LEFT JOIN user u2 ON n2.owner_id = u2.user_id
        WHERE n1.topic_id = #{topicId} AND n2.topic_id = #{topicId};
    </select>

</mapper>